Архитектура проекта:
Проект построен на основе микросервисного подхода с использованием брокера сообщений (RabbitMQ) для передачи данных между различными этапами обработки. Основные компоненты архитектуры включают:

Producer-Consumer Архитектура:

Producer: Отправляет необработанные XML файлы в очередь raw_xml_files RabbitMQ.
Consumer: Слушает очередь raw_xml_files, получает файлы и передает их на обработку.
Обработка файлов:

Парсинг XML: Входные XML файлы парсятся, и данные извлекаются для дальнейшей трансформации.
Трансформация данных: Извлеченные данные трансформируются согласно правилам и шаблонам, заданным в проекте.
Генерация выходных файлов: После трансформации генерируются новые XML или JSON файлы.
Отправка обработанных файлов:

Producer: Отправляет обработанные файлы в очередь processed_xml_files RabbitMQ для дальнейшего использования целевой системой.
Мониторинг директорий:

Watchers: Постоянно мониторят директории inputXML, inputJSON, и output для обнаружения новых или измененных файлов и запускают соответствующие процессы обработки.
Основные модули и их взаимодействие:
connector/ (подключение к RabbitMQ):

consumer.js: Подключается к очереди RabbitMQ, получает файлы и сохраняет их для дальнейшей обработки.
producer.js: Отправляет файлы в очередь RabbitMQ.
sendProcessedXMLFile.js: Отправляет обработанные файлы в соответствующую очередь RabbitMQ.
handlers/ (обработка файлов):

fileHandler.js: Мониторит директории и инициирует обработку файлов при их добавлении или изменении.
xmlHandler.js: Парсит входные XML файлы, трансформирует данные и генерирует новые XML файлы.
jsonHandler.js: Аналогично xmlHandler, но для JSON файлов.
tags/ (трансформация данных):

part.js: Обработка и трансформация данных, связанных с частями (Part).
transformItemInventoryGroup.js: Трансформация данных для инвентарных групп.
transformItemPlanningGroup.js: Трансформация данных для планировочных групп.
utils/ (утилиты):

logger.js: Логирование действий и ошибок.
directoryHelper.js: Обеспечение наличия необходимых директорий.
Основной модуль:

index.js: Главный файл, который инициализирует все необходимые процессы: мониторинг директорий, запуск consumer и т.д.
Взаимодействие компонентов:
Входные XML и JSON файлы помещаются в соответствующие директории (inputXML, inputJSON).
Producer отправляет файлы в очередь raw_xml_files RabbitMQ.
Consumer получает файлы из очереди, сохраняет их временно и инициирует их обработку.
Файлы парсятся и трансформируются согласно заданным правилам и шаблонам.
Обработанные файлы отправляются в очередь processed_xml_files RabbitMQ для дальнейшего использования.
Весь процесс логируется, и ошибки фиксируются для упрощения отладки.
Такой подход обеспечивает надежную и масштабируемую обработку данных с возможностью легкого расширения и модификации функционала.
